- hosts: controller, databases, reporter
  become: true
  tasks:
    - name: Update package lists
      apt:
        update_cache: yes
      retries: 5
      delay: 10
    - name: Install Python 3 and pip3
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present
      retries: 5
      delay: 10
      tags : 
        - infrastructure

- hosts: databases
  tasks:
    - name: Infrastructure preparation 
      block:
        - name: remove current databases 
          shell: |
            mkdir -p /home/{{ ansible_user }}/dmbench/database
            cd /home/{{ ansible_user }}/dmbench/database
            docker compose down
            timestamp=$(date +%Y%m%d%H%M%S) 
            mkdir /home/{{ ansible_user }}/dmbench/backup
            sudo mv /home/{{ ansible_user }}/dmbench/database  "/home/{{ ansible_user }}/dmbench/backup/_backup_${timestamp}"
        - name: Clean up the target directory
          ansible.builtin.file:
            state: absent
            path: /home/{{ ansible_user }}/dmbench/database/
        - name: Copy entire folder with static and config files
          copy:
            src: ../database/
            dest: /home/{{ ansible_user }}/dmbench/database/
      tags : 
        - infrastructure-databases 
        - infrastructure
        - databases-full
- hosts: reporter
  tasks:
    - name: Infrastructure preparation 
      block:
        - name: Clean up the target directory
          ansible.builtin.file:
            state: absent
            path: /home/{{ ansible_user }}/dmbench/reporter/
        - name: Copy entire folder with static and config files
          copy:
            src: ../reporter/
            dest: /home/{{ ansible_user }}/dmbench/reporter/
      tags:
        - infrastructure-reporter 
        - infrastructure
        - reporter-full
- hosts: controller
  tasks:
    - name: Infrastructure preparation 
      block:
        - name: Clean up the target directory
          ansible.builtin.file:
            state: absent
            path: /home/{{ ansible_user }}/dmbench/controller/
        - name: Copy entire folder with static and config files
          copy:
            src: ../controller/
            dest: /home/{{ ansible_user }}/dmbench/controller/
      tags:
        - infrastructure-controller 
        - infrastructure
- hosts: databases
  tasks:
    - name: Configuration
      block:
        - name: Set up prometheus.yml
          template:
            src: ../database/prometheus.yml
            dest: /home/{{ ansible_user }}/dmbench/database/prometheus.yml
      tags : 
        - configuration-databases
        - configuration
- hosts: databases
  vars_files:
    - config.yml  
  tasks:
    - name: Configuration
      block:
        - name: Set up docker-compose.yml
          template:
            src: ../database/docker-compose.yml
            dest: /home/{{ ansible_user }}/dmbench/database/docker-compose.yml
      tags : 
        - configuration-databases
        - configuration
        - databases-full
- hosts: reporter
  tasks:
    - name: Configuration
      block:
        - name: Set up docker-compose.yml
          template:
            src: ../reporter/kafkacluster/docker-compose.yml
            dest: /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/docker-compose.yml

        - name: Install required libraries for Ubuntu
          become: yes
          apt:
            name:
              - librdkafka-dev
            update_cache: yes
        - name: Install Python required libraries
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/kafkacluster
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r requirements.txt
          args:
            executable: /bin/bash
      tags:
        - configuration-reporter
        - configuration
        - reporter-full
- hosts: reporter
  vars_files:
    - config.yml  
  vars:
    logsparserconfig: "default"  
  tasks:
    - name: Configuration
      block:
        - name: Set logsparserconfig to 'db2' when tag db2 is used
          set_fact:
            logsparserconfig: "db2"
          when: "'db2' in ansible_run_tags"

        - name: Set logsparserconfig to 'custom' when tag custom is used
          set_fact:
            logsparserconfig: "custom"
          when: "'custom' in ansible_run_tags"

        - name: Display the value of logsparserconfig
          debug:
            msg: "The value of logsparserconfig is: {{ logsparserconfig }}"
        - name: Set up config.ini for logs parser
          template:
            src: ../reporter/logsParser/config.ini
            dest: /home/{{ ansible_user }}/dmbench/reporter/logsParser/config.ini
      tags : 
        - configuration-reporter
        - configuration
        - reporter-full
- hosts: databases
  vars_files:
    - config.yml 
  vars:
    container_names:
      - grafana
  tasks:
    - name: Databases deployment
      block:
        - name: Deploy Prometheus , MongoDb and Grafana
          shell: |
            cd /home/{{ ansible_user }}/dmbench/database
            docker compose down
            docker compose up -d
        - name: Install requests library needed for community.docker.docker_container_info 
          shell: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install requests
          args:
            executable: /bin/bash
        - name: Check container health status
          community.docker.docker_container_info:
            name: grafana
          register: container_info
          until: >
            container_info and container_info.container.State.Health.Status == 'healthy'
          retries: 30
          delay: 10
          failed_when: >
            container_info.container.State.Health.Status not in ['healthy', 'starting']
          changed_when: false
      tags : 
        - deploy_db
        - databases-full
- hosts: reporter
  tasks:
    - name: Kafka Cluster Deployment
      block:
        - name: Clean directory
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/kafkacluster
            docker compose down
            rm -f *.log
            chmod +x killConsumers.sh
            ./killConsumers.sh
        - name: Start Kafka Cluster
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/kafkacluster
            docker compose up -d
        - name: Install requests library needed for community.docker.docker_container_info 
          shell: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install requests
          args:
            executable: /bin/bash 
        - name: Check container health status
          community.docker.docker_container_info:
            name: kafka1
          register: container_info
          until: >
            container_info and container_info.container.State.Health.Status == 'healthy'
          retries: 30
          delay: 10
          failed_when: >
            container_info.container.State.Health.Status not in ['healthy', 'starting']
          changed_when: false
        - name: Start Kafka Consumers
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/kafkacluster
            . venv/bin/activate
            nohup python3 -u consumer.py > consumperoutput.log 2>&1 & 
            nohup python3 -u resourcesConsumer.py  > resourceconsumperoutput.log 2>&1 & 
        - name: Wait for all log files to appear
          shell: |
            if [ -f /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/performanceBenchmark.log ] && \
              [ -f /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/framework.log ] && \
              [ -f /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/migrationEngine.log ] && \
              [ -f /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/cadvisor.log ]; then
              exit 0
            else
              exit 1
            fi
          register: retry_result
          until: retry_result.rc == 0
          retries: 60  # Number of retries
          delay: 10  # Delay between retries in seconds
          failed_when: false
          changed_when: false
      tags : 
        - pre_experiment

- hosts: controller
  tasks:
    - name: Run pre_experiment steps depending on the migration Engine
      block : 
        - name : Run pre_experiment steps for Db2
          ansible.builtin.include_tasks: 
            file: migrationengines/db2/pre_experiment.yml
            apply:
              tags:
                - pre_experiment
          when:
            - '"db2" in ansible_run_tags'
          register: pre_experimentOutput
          tags : 
            - pre_experiment
        - name : Run pre_experiment steps for Default Migation engine
          ansible.builtin.include_tasks: 
            file: migrationengines/defaultEngine/pre_experiment.yml
            apply:
              tags:
                - pre_experiment
          when:
            - '"default" in ansible_run_tags'
          register: pre_experimentOutput
          tags : 
            - pre_experiment
        - name : Run pre_experiment steps for custom Engine
          ansible.builtin.include_tasks: 
            file: migrationengines/custom/pre_experiment.yml
            apply:
              tags:
                - pre_experiment
          when:
            - '"custom" in ansible_run_tags'
          register: pre_experimentOutput
          tags : 
            - pre_experiment
        - name: Output 
          debug:
            msg: "{{ pre_experimentOutput }}"
          when: pre_experimentOutput is defined
          tags:
            - pre_experiment

- hosts: controller
  tasks:
    - name: Start experiment 
      block :
        - name : Run start_experiment steps for Db2
          ansible.builtin.include_tasks: 
            file: migrationengines/db2/start_experiment.yml
            apply:
              tags:
                - start_experiment
          when:
            - '"db2" in ansible_run_tags'
          register: startdb2output
          tags : 
            - start_experiment
        - name : Run start_experiment steps for Default
          ansible.builtin.include_tasks: 
            file: migrationengines/defaultEngine/start_experiment.yml
            apply:
              tags:
                - start_experiment
          when:
            - '"default" in ansible_run_tags'
          register: startdefaultoutput
          tags : 
            - start_experiment
        - name : Run start_experiment steps for Custom
          ansible.builtin.include_tasks: 
            file: migrationengines/custom/start_experiment.yml
            apply:
              tags:
                - start_experiment
          when:
            - '"custom" in ansible_run_tags'
          register: startcustomoutput
          tags : 
            - start_experiment
        - name : docker compose up 
          shell: |
            cd /home/{{ ansible_user }}/dmbench/controller
            docker compose down
            docker compose up -d
          tags : 
            - start_experiment
        - name: Monitor Experiment ( "Waiting for experiment to finish. \n Check the logs of the controller docker container and the the .log files in the folder Kafkacluster in the reporter machine." )
          shell: |
            cd /home/{{ ansible_user }}/dmbench/controller
            python3 -m venv venv
            . venv/bin/activate
            pip3 install docker           
            nohup python3 monitor_experiment.py > monitor_experiment.log 2>&1 & 
          tags:
            - start_experiment

- hosts: reporter
  tasks:
    - name: Post Experiment 
      block : 
        - name : kill Kafka cluster
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/
            docker compose down
            chmod +x killConsumers.sh
            ./killConsumers.sh 
        - name : run parser
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/logsParser
            . /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/venv/bin/activate
            python3 main.py
        - name: Copy create results folder script
          template:
            src: ../reporter/logsParser/createResultsFolder.py
            dest: /home/{{ ansible_user }}/dmbench/reporter/logsParser/createResultsFolder.py
        - name : Create new folder for results
          register : folderpath
          shell: |
            cd /home/{{ ansible_user }}/dmbench/reporter/logsParser
            . /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/venv/bin/activate
            python3 createResultsFolder.py
        - name: Fetch config.ini from controller host
          ansible.builtin.fetch:
            src: /home/{{ ansible_user }}/dmbench/controller/configs/config.ini
            dest: /tmp/fetched_files/config.ini
            flat: yes
          delegate_to: controller      
        - name: Fetch config.ini from controller host
          ansible.builtin.fetch:
            src: /home/{{ ansible_user }}/dmbench/controller/configs/docker-compose.yml
            dest: /tmp/fetched_files/docker-compose.yml
            flat: yes
          delegate_to: controller
        - name: Copy docker-compose.yml file to the results folder
          ansible.builtin.copy:
            src: /tmp/fetched_files/docker-compose.yml
            dest: "{{ folderpath.stdout }}/engine-docker-compose.yml"
        - name: Copy config.ini file to the results folder
          ansible.builtin.copy:
            src: /tmp/fetched_files/config.ini
            dest: "{{folderpath.stdout}}"
        - name : Run post_experiment steps for Db2
          vars:
            resultsfolderpath: "{{ folderpath }}"
          ansible.builtin.include_tasks: 

            file: migrationengines/db2/post_experiment.yml
            apply:
              tags:
                - post_experiment
          when:
            - '"db2" in ansible_run_tags'
          register: postdb2output
          tags : 
            - post_experiment
        - name : Run post_experiment steps for Db2
          vars:
            resultsfolderpath: "{{ folderpath }}"
          ansible.builtin.include_tasks: 

            file: migrationengines/defaultEngine/post_experiment.yml
            apply:
              tags:
                - post_experiment
          when:
            - '"default" in ansible_run_tags'
          register: postdefaultoutput
          tags : 
            - post_experiment
        - name : Run post_experiment steps for Db2
          vars:
            resultsfolderpath: "{{ folderpath }}"
          ansible.builtin.include_tasks: 

            file: migrationengines/custom/post_experiment.yml
            apply:
              tags:
                - post_experiment
          when:
            - '"custom" in ansible_run_tags'
          register: postcustomoutput
          tags : 
            - post_experiment
        - name : Copy results to the new folder 
          shell: |
            cp /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/migrationEngine.log "{{folderpath.stdout}}"
            cp /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/performanceBenchmark.log "{{folderpath.stdout}}"
            cp /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/framework.log "{{folderpath.stdout}}"
            cp /home/{{ ansible_user }}/dmbench/reporter/logsParser/*.csv "{{folderpath.stdout}}"
            cp /home/{{ ansible_user }}/dmbench/reporter/logsParser/*.json "{{folderpath.stdout}}"
            cp /home/{{ ansible_user }}/dmbench/reporter/kafkacluster/cadvisor.log "{{folderpath.stdout}}"
      tags : 
        - post_experiment
